snippet beg "template"
#include <bits/stdc++.h>
 
// Add other commonly used headers as needed
using namespace std;
#define int long long
 
#ifdef Nikhil
template<typename T>
ostream& operator<<(ostream& os, const vector<T>& vec) {
    os << "[";
    for (size_t i = 0; i < vec.size(); ++i) {
        os << vec[i];
        if (i != vec.size() - 1) os << ", ";
    }
    os << "]";
    return os;
}
 
void dbg(const char *v, const auto &...x) { cerr << "[" << v << "]", ((cerr << " " << x), ...) << "\n"; }
#define dbg(...) dbg(#__VA_ARGS__, __VA_ARGS__)
#else
#define dbg(...)
#endif
 
void solve() {
    // Your problem-solving logic goes here
    $0
}
 
int32_t main() {
	ios_base::sync_with_stdio(false);
   	cin.tie(NULL);
   	int t = 1; // For multiple test cases, uncomment and read 't'
   	 cin >> t;
   	while (t--) {
   		solve();
   	}
   	return 0;
}       
endsnippet
snippet minimal "minimalist begin"
#include <bits/stdc++.h>
 
using namespace std;
typedef long long ll;
 
int32_t main() {
    $0
}
endsnippet
 
snippet for "for"
for (int ${1:i} = 0; $1 < ${2:n}; $1++) {
    $0
}
endsnippet
 
snippet read "read first variable"
${1:int} ${2:n};
if (!(cin >> $2)) {
    return 1;
}
$0
endsnippet
 
snippet vect "vector"
vector<${1:int}> ${2:arr};$0
endsnippet
 
snippet all "all"
${1:arr}.begin(), $1.end()$0
endsnippet
 
snippet readvec "read vector"
vector<${1:int}> ${2:arr}(${3:n});
for ($1 &val : $2) {
    cin >> val;
}
$0
endsnippet
 
snippet sort "read vector"
sort(${1:arr}.begin(), $1.end());$0
endsnippet
 
snippet pb "push_back"
push_back($1);$0
endsnippet
